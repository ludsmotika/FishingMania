@using FishingMania.Web.ViewModels.FishingSpot;
@using System.Security.Claims;
@model FishingSpotDetailsViewModel

<div class="container text-center">
    <h2 class="bg-primary text-white rounded-pill mx-auto fs-1 my-5">@Model.Name</h2>
    <div class="d-flex col-md-12 bg-primary text-white rounded-5">
        <div class="col-md-6">
            <img src="@Model.Image.URL" class="col-md-12 my-4 rounded-5" />
            <h5>The common fish species you can catch on this spot:</h5>
            <div class="scrollable-div col-md-12 mb-5 bg-primary text-white rounded-4 overflow-x-auto">
                <div class="scrollable-content d-flex text-nowrap">
                    @foreach (var currentFishSpecies in Model.FishSpecies)
                    {
                        <div class="col-md-4 outline-0 d-inline-block">
                            <img src="@currentFishSpecies.Image.URL" class="col-md-12 rounded-5 my-4" />
                            <h5>@currentFishSpecies.Name</h5>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <h4 class="mt-4">Spot Description:</h4>
            <p class="mb-5 mx-2 fs-6 text-wrap text-break">@Model.Description</p>
            <div id="mapdiv" class="col-md-12 m-5" style="height:300px;"></div>
        </div>
    </div>

    @if (Model.ThreeBiggestCatches.Count() == 3 )
    {
        <div class="container text-center col-md-12 rounded-5 my-5 bg-primary">
            <p class="pt-4 h2 text-white">Look at the top three biggest catches on this spot!</p>

            <div class="row">
                @foreach (var currentCatch in Model.ThreeBiggestCatches)
                {
                    <partial name="~/Views/Shared/Catches/_CatchPartialView.cshtml" for="@currentCatch" />
                }
            </div>
        </div>
    }
    
    <div class="row col-md-12 bg-primary text-white rounded-5 my-5">

        <h2>Post Comments:</h2>

        @if (this.User.Identity.IsAuthenticated)
        {
            <form id="commentForm">
                <p>Write a comment:</p>
                <div class="d-flex flex-row text-center mb-5">
                    <textarea id="commentContent" rows="4" class="col-md-10 rounded-5"></textarea>
                    <button type="submit" class="btn bg-white text-primary m-auto">Submit Comment</button>
                </div>
                <span id="commentLengthValidationSpan" class="text-danger"></span>
            </form>
        }
        else
        {
            <div class="container d-flex flex-row offset-3 col-md-6 mt-4">
                <span>Please login if you want to leave comments on posts:</span>
                <a class="nav-link btn my-auto col-md-2 mx-auto bg-white text-primary" asp-area="Identity" asp-page="/Account/Login"><strong>Login</strong></a>
            </div>
        }
        <div id="commentsSection">
            <partial name="~/Views/Shared/Comments/_CommentsListPartialView.cshtml" for="@Model.Comments" />
        </div>
    </div>
</div>

<script src="https://openlayers.org/api/2.13.1/OpenLayers.js"></script>

<script>
    map = new OpenLayers.Map("mapdiv");
    map.addLayer(new OpenLayers.Layer.OSM());

    var lonLat = new OpenLayers.LonLat(@Model.Longitude, @Model.Latitude)
        .transform(
            new OpenLayers.Projection("EPSG:4326"), // transform from WGS 1984
            map.getProjectionObject() // to Spherical Mercator Projection
        );

    var zoom = 14;

    var markers = new OpenLayers.Layer.Markers("Markers");
    map.addLayer(markers);

    markers.addMarker(new OpenLayers.Marker(lonLat));

    map.setCenter(lonLat, zoom);
</script>


<script>
    $(document).ready(function () {
        $('#commentForm').submit(function (event) {
            event.preventDefault();

            var content = $('#commentContent').val();

            var minContentLength = 15;
            var maxContentLength = 500;

            if (content.length < minContentLength) {
                $('#commentLengthValidationSpan').text('Please enter at least ' + minContentLength + ' characters.');
                return;
            } else if (content.length > maxContentLength) {
                $('#commentLengthValidationSpan').text('Please enter no more than ' + maxContentLength + ' characters.');
                return;
            }
            else {
                $('#commentLengthValidationSpan').empty();
            }
            console.log(Boolean(`@User.Identity.IsAuthenticated`));
            var applicationUserId = Boolean(`@User.Identity.IsAuthenticated`) ? `@User.FindFirst(ClaimTypes.NameIdentifier)?.Value` : null;

            var commentContent = $('#commentContent').val();
            var commentData = {
                content: commentContent,
                applicationUserId: applicationUserId,
                entityType: @Convert.ToInt32(EntityWithCommentsType.Spot),
                entityTypeId: @Model.Id,
            };

            $('#commentContent').val('');

            $.ajax({
                url: '/api/Comments',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(commentData),
                success: function (comments) {
                    $('#commentsSection').empty();

                    $('#commentsSection').append(comments);
                },
                error: function (xhr, status, error) {
                    alert("Unexpected error while commenting this post!");
                }
            });
        });
    });
</script>